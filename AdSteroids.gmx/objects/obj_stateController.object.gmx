<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum metaGameStates {
playerDiedState,
titleScreenState,
livesScreenState,
playingGameState,
gameOverState
}

randomize();
frameCounter = 0;
gameState = metaGameStates.titleScreenState;

global.P_System=part_system_create();
global.Particle1=part_type_create();
//global.Particle2=part_type_create();

lives = 3;
score = 0;
currentLevel = 0;

livesScreenController = instance_create(0,0, obj_livesScreenController);
livesScreenController.persistent = true;
instance_deactivate_object(livesScreenController);

gameOverController = instance_create(0,0, obj_gameOverController);
gameOverController.persistent = true;
instance_deactivate_object(gameOverController);

scoreController = instance_create(0,0, obj_scoreController);
scoreController.persistent = true;
instance_deactivate_object(scoreController);

titleController = instance_create(0,0, obj_titleController);
titleController.persistent = true;

draw_set_font(general);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_colour(c_white);

gameController = instance_create(0,0, obj_gameController);
gameController.persistent = true;
gameController.stateController = id;

part_type_shape(global.Particle1,pt_shape_pixel);            //This defines the particles shape
part_type_size(global.Particle1,1,1,0,0);                    //This is for the size
part_type_scale(global.Particle1,1,1);                       //This is for scaling
part_type_color1(global.Particle1,c_white);                  //This sets its colour. There are three different codes for this
part_type_alpha1(global.Particle1,1);                        //This is its alpha. There are three different codes for this
part_type_speed(global.Particle1,0.50,5,-0.001,0);            //The particles speed
part_type_direction(global.Particle1,0,359,0,0);            //The direction
part_type_orientation(global.Particle1,0,0,0,0,1);           //This changes the rotation of the particle
part_type_blend(global.Particle1,0);                         //This is the blend mode, either additive or normal
part_type_life(global.Particle1,90,300);                       //this is its lifespan in steps

with(gameController)
{
    event_user(0); //populate asteroids
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stop drawing Lives screen and start a new session
gameState = metaGameStates.playingGameState;
instance_deactivate_object(livesScreenController);
draw_set_font(general);//for score UI

with(gameController)
{
    event_user(1); //start game room
}

with(scoreController)
{
    gameState = scoreUIStates.playingGameState;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frameCounter++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///player finished dying; decide based on lives left

part_system_clear(global.Particle1);

with (obj_asteroid)
{
    instance_destroy();
}
with (obj_projectile)
{
    instance_destroy();
}
with (obj_ufo)
{
    instance_destroy();
}

if (lives &lt;= 0)
{
    //instance_activate_object(titleController);
    //gameState = metaGameStates.titleScreenState;
    instance_activate_object(gameOverController);
    gameState = metaGameStates.gameOverState;
    instance_activate_object(livesScreenController);
    
    with(scoreController)
    {
        gameState = scoreUIStates.gameOverState;
    }
    
    
    /*with(gameController)
    {
        event_user(0); //populate with asteroids
    }*/
}
else
{
    if (alarm_get(1) != room_speed * 3)
    {
        gameState = metaGameStates.livesScreenState;
        instance_activate_object(livesScreenController);
        instance_activate_object(scoreController);
        
        with (scoreController)
        {
            gameState = scoreUIStates.gameOverState;
        }
        
        alarm_set(1, room_speed * 3);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///delete particle systems

part_type_destroy(global.Particle1);
part_system_destroy(global.P_System);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do stuff if title is showing
if(gameState == metaGameStates.titleScreenState)
{
    instance_deactivate_object(titleController);
    part_system_clear(global.Particle1);

    with (obj_asteroid)
    {
        instance_destroy();
    }
    with (obj_bullet)
    {
        instance_destroy();
    }
    
    with(gameController)
    {
        event_user(1); //start game room
    }
    instance_activate_object(scoreController);
    with(scoreController)
    {
        gameState = scoreUIStates.playingGameState;
    }
    gameState = metaGameStates.playingGameState;
    
    lives = 3;
}
else if(gameState == metaGameStates.gameOverState)
{
    instance_activate_object(titleController);
    instance_deactivate_object(gameOverController);
    instance_deactivate_object(livesScreenController);
    instance_deactivate_object(scoreController);
    score = 0;
    gameState = metaGameStates.titleScreenState;
    
    with(gameController)
    {
        event_user(0); //populate with asteroids
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
